# ===========================================
#  Video Downloader Bot (VIP Version) - –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
#  –ê–≤—Ç–æ—Ä: @frastiel (Telegram)
#  Aiogram v3, Python 3.11
# ===========================================
from __future__ import annotations
import os
import re
import json
import asyncio
import tempfile
import logging
import shutil
import time
import sqlite3
import uuid
from datetime import datetime, timedelta
from functools import partial
from typing import Dict, Optional, List, Tuple, Any
from urllib.parse import urlparse, urlunparse
import requests
from dotenv import load_dotenv
from yt_dlp import YoutubeDL
from yt_dlp.utils import DownloadError, UnsupportedError
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, BaseFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from aiogram.enums import ChatAction
from aiogram.types import FSInputFile
from aiohttp import web

# ---- config ----
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN (–∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ .env)")

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# ---- bot & dispatcher ----
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ---- state ----
PENDING_LINKS: Dict[int, str] = {}
ACTIVE_DOWNLOADS: Dict[int, Dict[str, Any]] = {}  # –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∑–∞–≥—Ä—É–∑–∫–∞—Ö

# ---- regex ----
URL_RE = re.compile(r"https?://[^\s]+", re.IGNORECASE)

# —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è TikTok
TIKTOK_ANY_RE = re.compile(
    r"(?:vm\.tiktok\.com|m\.tiktok\.com|www\.tiktok\.com|tiktok\.com)/(?:@[^/\s]+/video/\d+|video/\d+|v/\d+|t/|share/|embed/|tag/|hashtag/|music/|@[^/\s]+)",
    re.IGNORECASE,
)

# —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Instagram –∏ Facebook
INSTAGRAM_RE = re.compile(r"(?:www\.instagram\.com/p/|www\.instagram\.com/reel/|www\.instagram\.com/tv/)", re.IGNORECASE)
FACEBOOK_RE = re.compile(r"(?:www\.facebook\.com/.+/videos/|www\.facebook\.com/video.php)", re.IGNORECASE)

# —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Twitter/X
TWITTER_RE = re.compile(r"(?:twitter\.com|x\.com)/[^/]+/status/\d+", re.IGNORECASE)

# —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è VK (–æ–±–Ω–æ–≤–ª–µ–Ω–æ!)
VK_RE = re.compile(r"(?:vk\.com/video-?\d+_\d+|vk\.com/clip-?\d+_\d+|vk\.com/wall-?\d+_\d+|m\.vkvideo\.ru/[\w/]+)", re.IGNORECASE)

# —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Reddit
REDDIT_RE = re.compile(r"reddit\.com/(?:r/[^/]+/comments/|comments/)[\w]+/[\w_-]+/[\w]+", re.IGNORECASE)

# —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Pinterest (–æ–±–Ω–æ–≤–ª–µ–Ω–æ!)
PINTEREST_RE = re.compile(r"(?:pinterest\.(?:com|ru|ca|de|fr|jp|uk|it|es|nl|se|pl|br|mx|co\.uk)|pin\.it)/[\w/-]+", re.IGNORECASE)

# —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Dailymotion
DAILYMOTION_RE = re.compile(r"dailymotion\.com/video/[\w-]+", re.IGNORECASE)

# —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Vimeo
VIMEO_RE = re.compile(r"vimeo\.com/(?:\d+|album/\d+/video/\d+)", re.IGNORECASE)

# —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è SoundCloud
SOUNDCLOUD_RE = re.compile(r"soundcloud\.com/[^/]+/[^/]+", re.IGNORECASE)

# —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã
DIRECT_FILE_RE = re.compile(r".*\.(?:mp4|mkv|webm|avi|mov|wmv|flv|mp3|m4a|wav|aac|ogg)$", re.IGNORECASE)

# –∫–æ—Ä–æ—Ç–∫–∏–µ/—Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–æ–º–µ–Ω—ã (–¥–æ–±–∞–≤–ª–µ–Ω pin.it)
SHORTENER_DOMAINS = (
    "t.co", "t.me", "bit.ly", "tinyurl.com", "lnkd.in", "goo.gl", "rb.gy",
    "vm.tiktok.com", "m.tiktok.com", "www.tiktok.com", "tiktok.com",
    "x.com", "twitter.com", "vk.com", "m.vkvideo.ru", "reddit.com", "pinterest.com", "pin.it",
    "dailymotion.com", "vimeo.com", "soundcloud.com"
)

# YouTube patterns
YOUTUBE_VIDEO_RE = re.compile(r"(youtu\.be/|youtube\.com/(watch\?v=|shorts/|embed/))", re.IGNORECASE)

# ---- yt-dlp base opts ----
YTDL_BASE_OPTS = {"nocheckcertificate": True, "quiet": True, "no_warnings": True}

# ===== –¢–ò–ü–´ –û–®–ò–ë–û–ö –ò –°–ò–°–¢–ï–ú–ê –û–ë–†–ê–ë–û–¢–ö–ò =====
class DownloadErrorType:
    """–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    UNSUPPORTED_URL = "unsupported_url"
    PRIVATE_VIDEO = "private_video"
    AGE_RESTRICTED = "age_restricted"
    NETWORK_ERROR = "network_error"
    FILE_TOO_LARGE = "file_too_large"
    INVALID_COOKIES = "invalid_cookies"
    EXTERNAL_SERVICE_ERROR = "external_service_error"
    INTERNAL_ERROR = "internal_error"
    RATE_LIMITED = "rate_limited"
    URL_NOT_FOUND = "url_not_found"
    NO_VIDEO_IN_POST = "no_video_in_post"
    DIRECT_FILE_DOWNLOAD = "direct_file_download"

class ErrorManager:
    def __init__(self, default_lang="ru"):
        self.default_lang = default_lang
        self.error_messages = {
            "ru": {
                DownloadErrorType.UNSUPPORTED_URL: {
                    "title": "üîó –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π URL",
                    "description": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç URL. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:",
                    "details": [
                        "‚Ä¢ –≠—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ (–Ω–µ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Ö–µ—à—Ç–µ–≥)",
                        "‚Ä¢ –°—Å—ã–ª–∫–∞ –≤–µ–¥–µ—Ç –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (YouTube, TikTok, Instagram, Facebook, Twitter/X, VK, Reddit, Pinterest, Dailymotion, Vimeo, SoundCloud)",
                        "‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–æ–∫ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏"
                    ],
                    "example": "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: https://x.com/username/status/123456789"
                },
                DownloadErrorType.PRIVATE_VIDEO: {
                    "title": "üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ",
                    "description": "–≠—Ç–æ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –µ–≥–æ:",
                    "details": [
                        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cookies",
                        "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª cookies.txt –∏–∑ –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞",
                        "3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –≤–∏–¥–µ–æ"
                    ],
                    "additional": "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å cookies, —á–∏—Ç–∞–π—Ç–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: @BlackVeilInfo"
                },
                DownloadErrorType.AGE_RESTRICTED: {
                    "title": "üîû –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
                    "description": "–≠—Ç–æ –≤–∏–¥–µ–æ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –µ–≥–æ:",
                    "details": [
                        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cookies",
                        "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª cookies.txt –∏–∑ –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞",
                        "3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç"
                    ],
                    "additional": "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç"
                },
                DownloadErrorType.NETWORK_ERROR: {
                    "title": "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é",
                    "description": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:",
                    "details": [
                        "1. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                        "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤",
                        "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /retry –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"
                    ],
                    "additional": "–≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–±—ã—á–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ä–µ—à–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                },
                DownloadErrorType.FILE_TOO_LARGE: {
                    "title": "üíæ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
                    "description": "–í–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (2 –ì–ë). –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
                    "details": [
                        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ (–º–µ–Ω—å—à–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É)",
                        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ transfer.sh' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏",
                        "3. –û–±—Ä–µ–∂—å—Ç–µ –≤–∏–¥–µ–æ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /trim"
                    ]
                },
                DownloadErrorType.INVALID_COOKIES: {
                    "title": "üç™ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ cookies",
                    "description": "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–º cookies. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:",
                    "details": [
                        "1. –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Netscape HTTP Cookie File)",
                        "2. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è cookies (–æ–±—ã—á–Ω–æ 1-2 –Ω–µ–¥–µ–ª–∏)",
                        "3. –ü–ª–∞—Ç—Ñ–æ—Ä–º—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞–Ω—ã cookies"
                    ],
                    "additional": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö cookies –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º 'Get cookies.txt' –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
                },
                DownloadErrorType.RATE_LIMITED: {
                    "title": "‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
                    "description": "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:",
                    "details": [
                        "1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π",
                        "2. –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥—Ä—è–¥",
                        "3. –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É"
                    ],
                    "additional": "–õ–∏–º–∏—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫"
                },
                DownloadErrorType.INTERNAL_ERROR: {
                    "title": "‚öôÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞",
                    "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å:",
                    "details": [
                        "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                        "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
                        "‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏ –±–æ—Ç–∞"
                    ],
                    "additional": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ: @frastiel"
                },
                DownloadErrorType.URL_NOT_FOUND: {
                    "title": "‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    "description": "–í–∏–¥–µ–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ:",
                    "details": [
                        "1. –í–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–º",
                        "2. –°—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É",
                        "3. –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ"
                    ],
                    "additional": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
                },
                DownloadErrorType.NO_VIDEO_IN_POST: {
                    "title": "üñºÔ∏è –ù–µ—Ç –≤–∏–¥–µ–æ –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                    "description": "–í —ç—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–º —Ç–æ–ª—å–∫–æ:",
                    "details": [
                        "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞",
                        "‚Ä¢ GIF-–∞–Ω–∏–º–∞—Ü–∏—è (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)",
                        "‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å"
                    ],
                    "additional": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –ø–æ—Å—Ç –∏–ª–∏ –ø–∏–Ω —Å –≤–∏–¥–µ–æ."
                },
                DownloadErrorType.DIRECT_FILE_DOWNLOAD: {
                    "title": "üì• –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞",
                    "description": "–Ø –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É:",
                    "additional": "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–µ—Ç–∏."
                }
            },
            "en": {
                DownloadErrorType.UNSUPPORTED_URL: {
                    "title": "üîó Unsupported URL",
                    "description": "Unfortunately, I cannot process this URL. Make sure that:",
                    "details": [
                        "‚Ä¢ It's a direct link to a video (not a profile or hashtag)",
                        "‚Ä¢ The link points to a supported platform (YouTube, TikTok, Instagram, Facebook, Twitter/X, VK, Reddit, Pinterest, Dailymotion, Vimeo, SoundCloud)",
                        "‚Ä¢ The link doesn't contain typing errors"
                    ],
                    "example": "Example of a correct link: https://x.com/username/status/123456789"
                },
                DownloadErrorType.PRIVATE_VIDEO: {
                    "title": "üîí Private video",
                    "description": "This video is available only to authorized users. To download it:",
                    "details": [
                        "1. Send the /cookies command",
                        "2. Upload the cookies.txt file from your browser",
                        "3. Make sure your account has access to this video"
                    ],
                    "additional": "For more information on how to get cookies, see our channel: @BlackVeilInfo"
                },
                DownloadErrorType.AGE_RESTRICTED: {
                    "title": "üîû Age restricted",
                    "description": "This video has age restrictions. To download it:",
                    "details": [
                        "1. Send the /cookies command",
                        "2. Upload the cookies.txt file from your browser",
                        "3. Make sure your account has the correct age set"
                    ],
                    "additional": "If you're sure your age meets the requirements, try logging in via browser and confirming your age"
                },
                DownloadErrorType.NETWORK_ERROR: {
                    "title": "üåê Network issues",
                    "description": "Failed to download video due to temporary network problems. Try:",
                    "details": [
                        "1. Retry in a few minutes",
                        "2. Check service status",
                        "3. Use the /retry command for another attempt"
                    ],
                    "additional": "These errors are usually temporary and resolve automatically"
                },
                DownloadErrorType.FILE_TOO_LARGE: {
                    "title": "üíæ File too large",
                    "description": "Video exceeds Telegram limit (2 GB). Available options:",
                    "details": [
                        "1. Choose audio instead of video (smaller size)",
                        "2. Use 'Download via transfer.sh' button to get a link",
                        "3. Trim video to needed fragment using /trim command"
                    ]
                },
                DownloadErrorType.INVALID_COOKIES: {
                    "title": "üç™ Invalid cookies",
                    "description": "Problem with cookies file. Check:",
                    "details": [
                        "1. File format (should be Netscape HTTP Cookie File)",
                        "2. Cookies expiration (usually 1-2 weeks)",
                        "3. Platform for which cookies were created"
                    ],
                    "additional": "To get new cookies, use 'Get cookies.txt' extension in your browser"
                },
                DownloadErrorType.RATE_LIMITED: {
                    "title": "‚è±Ô∏è Too many requests",
                    "description": "You've reached the request limit. Please:",
                    "details": [
                        "1. Wait 5 minutes before next attempt",
                        "2. Don't send identical requests in a row",
                        "3. For urgent downloads use direct link"
                    ],
                    "additional": "Limits exist to protect the service from overload"
                },
                DownloadErrorType.INTERNAL_ERROR: {
                    "title": "‚öôÔ∏è Internal error",
                    "description": "An unexpected error occurred. It may be related to:",
                    "details": [
                        "‚Ä¢ Temporary server issues",
                        "‚Ä¢ Changes in platform API",
                        "‚Ä¢ Bot internal errors"
                    ],
                    "additional": "Please try again later or report the error: @frastiel"
                },
                DownloadErrorType.URL_NOT_FOUND: {
                    "title": "‚ùå URL not found",
                    "description": "Video not found by this link. Possibly:",
                    "details": [
                        "1. Video was deleted by author",
                        "2. Link contains an error",
                        "3. Video is unavailable in your region"
                    ],
                    "additional": "Check the link and try again"
                },
                DownloadErrorType.NO_VIDEO_IN_POST: {
                    "title": "üñºÔ∏è No video in post",
                    "description": "No video was found in this post. It might contain only:",
                    "details": [
                        "‚Ä¢ Text message",
                        "‚Ä¢ Photo or image",
                        "‚Ä¢ GIF animation (not supported)",
                        "‚Ä¢ Link to external resource"
                    ],
                    "additional": "Try finding another post or pin with video content."
                },
                DownloadErrorType.DIRECT_FILE_DOWNLOAD: {
                    "title": "üì• Direct file download",
                    "description": "I detected a direct link to a file. Starting download:",
                    "additional": "This may take some time depending on file size and network speed."
                }
            }
        }

    def get_error_type(self, error: Exception, url: str = None) -> DownloadErrorType:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
        error_msg = str(error).lower()
        if "unsupported url" in error_msg or isinstance(error, UnsupportedError):
            return DownloadErrorType.UNSUPPORTED_URL
        elif "age restricted" in error_msg or "restricted video" in error_msg:
            return DownloadErrorType.AGE_RESTRICTED
        elif "private" in error_msg or "login required" in error_msg:
            return DownloadErrorType.PRIVATE_VIDEO
        elif "network" in error_msg or "timeout" in error_msg or "connection" in error_msg:
            return DownloadErrorType.NETWORK_ERROR
        elif "file too large" in error_msg or "exceeds file size limit" in error_msg:
            return DownloadErrorType.FILE_TOO_LARGE
        elif "cookies" in error_msg or "authentication" in error_msg or "not authorized" in error_msg:
            return DownloadErrorType.INVALID_COOKIES
        elif "429" in error_msg or "rate limit" in error_msg:
            return DownloadErrorType.RATE_LIMITED
        elif "not found" in error_msg or "unable to download" in error_msg:
            return DownloadErrorType.URL_NOT_FOUND
        elif "no video could be found" in error_msg:
            return DownloadErrorType.NO_VIDEO_IN_POST
        elif "direct file" in error_msg or "direct link" in error_msg:
            return DownloadErrorType.DIRECT_FILE_DOWNLOAD
        else:
            return DownloadErrorType.INTERNAL_ERROR

    def format_error_message(self, error_type: DownloadErrorType, lang: str = None, url: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞"""
        if lang is None or lang not in self.error_messages:
            lang = self.default_lang
        error_data = self.error_messages.get(lang, {}).get(error_type)
        if not error_data:
            # –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
            error_data = self.error_messages["ru"].get(error_type)
        if not error_data:
            return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"<b>{error_data['title']}</b>\n"
        message += f"{error_data['description']}\n"
        for detail in error_data.get("details", []):
            message += f"{detail}\n"
        if "example" in error_data:
            message += f"\n<i>–ü—Ä–∏–º–µ—Ä:</i>\n<code>{error_data['example']}</code>"
        if "additional" in error_data:
            message += f"\n‚ÑπÔ∏è {error_data['additional']}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        if error_type in [DownloadErrorType.NETWORK_ERROR, DownloadErrorType.RATE_LIMITED, DownloadErrorType.URL_NOT_FOUND]:
            message += "\nüîÑ –ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Instagram
        if "instagram.com" in url and error_type == DownloadErrorType.PRIVATE_VIDEO:
            message = (
                "<b>üîí Instagram: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</b>\n"
                "–≠—Ç–æ Stories, Reels –∏–ª–∏ –ø–æ—Å—Ç –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                "<b>–î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ cookies –Ω–µ –Ω—É–∂–Ω—ã!</b>\n"
                "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç—É –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ ‚Äî —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Instagram.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "1. –ü–æ–¥–æ–∂–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å\n"
                "2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞\n\n"
                "–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
                "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cookies\n"
                "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª cookies.txt\n"
            )
        return message

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—à–∏–±–æ–∫
error_manager = ErrorManager(default_lang="ru")

# ===== –§–ò–õ–¨–¢–†–´ –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–ô =====
class GroupFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:
    - –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    - –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    """
    def __init__(self, bot_username: str):
        self.bot_username = bot_username.lower()
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã
        self.supported_domains = [
            "tiktok.com", "vm.tiktok.com", "m.tiktok.com",
            "youtube.com", "youtu.be", "instagram.com", "facebook.com",
            "twitter.com", "x.com", "vk.com", "m.vkvideo.ru", "reddit.com", "pinterest.com", "pin.it",
            "dailymotion.com", "vimeo.com", "soundcloud.com"
        ]

    def find_first_url(self, text: str) -> Optional[str]:
        if not text:
            return None
        m = URL_RE.search(text)
        return m.group(0) if m else None

    def is_supported_url(self, url: str) -> bool:
        if not url:
            return False
        url_low = url.lower()
        return any(domain in url_low for domain in self.supported_domains)

    async def __call__(self, message: types.Message) -> bool:
        # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if message.chat.type == "private":
            logger.debug(f"–ü—Ä–∏–Ω—è—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}")
            return True

        # –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º:
        # 1. –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –±–æ—Ç–∞
        # 2. –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –±–æ—Ç–∞
        if message.text and message.text.startswith("/"):
            command_parts = message.text.split()
            if command_parts:
                # –£–¥–∞–ª—è–µ–º / –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
                command = command_parts[0][1:].split("@")[0]
                # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥
                supported_commands = ["start", "help", "cookies", "history", "setup"]
                if command in supported_commands:
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ –æ—Ç {message.from_user.id}: /{command}")
                    return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        url = self.find_first_url(message.text or "")
        if url and self.is_supported_url(url):
            logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø–µ –æ—Ç {message.from_user.id}")
            return True

        logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ—Ç {message.from_user.id} (–Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ —Å—Å—ã–ª–∫–∞)")
        return False

# ===== –ú–ï–ù–ï–î–ñ–ï–† –ù–ê–°–¢–†–û–ï–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
class UserSettings:
    DEFAULT_SETTINGS = {
        "default_format": "video",  # "video" –∏–ª–∏ "audio"
        "max_concurrent_downloads": 3,
        "preferred_quality": "best",  # "best", "1080p", "720p", "480p"
        "auto_retry": True,
        "trim_enabled": False,
        "language": "ru",
        "notification_level": "important"  # "all", "important", "none"
    }

    def __init__(self, db_path="user_settings.db"):
        self.db_path = db_path
        self._init_db()

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_settings (
            user_id INTEGER PRIMARY KEY,
            settings TEXT NOT NULL,
            last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        conn.commit()
        conn.close()

    def get_settings(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –¥–µ—Ñ–æ–ª—Ç–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT settings FROM user_settings WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        if result:
            try:
                user_settings = json.loads(result[0])
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                return {**self.DEFAULT_SETTINGS, **user_settings}
            except Exception as e:
                logger.error(f"Error parsing user settings: {e}")
        return self.DEFAULT_SETTINGS.copy()

    def update_setting(self, user_id, key, value):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if key not in self.DEFAULT_SETTINGS:
            return False
        settings = self.get_settings(user_id)
        settings[key] = value
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute(
                "INSERT OR REPLACE INTO user_settings (user_id, settings) VALUES (?, ?)",
                (user_id, json.dumps(settings))
            )
            conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error updating user setting: {e}")
            return False
        finally:
            conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_settings = UserSettings()

# ===== –ù–û–í–´–ï –ö–õ–ê–°–°–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ê–ú–ò =====
class DownloadManager:
    def __init__(self, max_concurrent=3):
        self.queue = asyncio.Queue()
        self.active_tasks: Dict[int, List[int]] = {}
        self.max_concurrent = max_concurrent
        self.lock = asyncio.Lock()
        self.processing = 0
        self.task_counter = 0
        asyncio.create_task(self._process_queue())

    async def _process_queue(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
        while True:
            try:
                callback_query, url, mode = await self.queue.get()
                user_id = callback_query.from_user.id

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async with self.lock:
                    if user_id not in self.active_tasks:
                        self.active_tasks[user_id] = []
                    if len(self.active_tasks[user_id]) >= self.max_concurrent:
                        await callback_query.message.answer(
                            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (3). "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫."
                        )
                        self.queue.task_done()
                        continue

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                self.task_counter += 1
                task_id = self.task_counter
                self.active_tasks[user_id].append(task_id)
                self.processing += 1

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
                ACTIVE_DOWNLOADS[task_id] = {
                    "callback_query": callback_query,
                    "url": url,
                    "mode": mode,
                    "user_id": user_id,
                    "status": "processing",
                    "start_time": time.time()
                }

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ
                asyncio.create_task(self._handle_download(callback_query, url, mode, user_id, task_id))
                self.queue.task_done()
            except Exception as e:
                logger.error(f"Error in download queue processor: {e}")
                if 'callback_query' in locals():
                    try:
                        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
                    except:
                        pass
                if 'self' in locals():
                    self.queue.task_done()

    async def _handle_download(self, callback_query: types.CallbackQuery, url: str, mode: str, user_id: int, task_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
            cached_file = cache_manager.get_cached_file(url, mode)
            if cached_file:
                await self._send_cached_file(callback_query, cached_file, mode)
                return

            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            target_chat_id = callback_query.message.chat.id
            status_msg = await bot.send_message(
                target_chat_id,
                f"–ì–æ—Ç–æ–≤–ª—é—Å—å –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {url}\n(–ó–∞–≥—Ä—É–∑–∫–∞ #{task_id})"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
            ACTIVE_DOWNLOADS[task_id]["status"] = "downloading"
            ACTIVE_DOWNLOADS[task_id]["status_msg_id"] = status_msg.message_id

            loop = asyncio.get_running_loop()
            progress_hook = make_progress_hook(loop, target_chat_id, status_msg.message_id, task_id)
            tempdir = tempfile.mkdtemp(prefix="tgdl_")
            filepath = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
            if not has_enough_disk_space(tempdir, required_mb=500):
                await callback_query.message.answer("‚ö†Ô∏è –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1 –ì–ë)
            try:
                head = requests.head(url, timeout=10)
                if 'content-length' in head.headers:
                    content_length = int(head.headers['content-length'])
                    if content_length > 1024 * 1024 * 1024:  # 1 –ì–ë
                        await bot.edit_message_text(
                            chat_id=target_chat_id,
                            message_id=status_msg.message_id,
                            text=f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({content_length/(1024*1024):.1f} MB). "
                                 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 1 –ì–ë."
                        )
                        return
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {e}")

            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
            if DIRECT_FILE_RE.search(url):
                try:
                    await bot.edit_message_text(
                        chat_id=target_chat_id,
                        message_id=status_msg.message_id,
                        text="üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É..."
                    )
                    filepath = await self._download_direct_file(url, tempdir)
                except Exception as e:
                    await self._handle_download_error(callback_query, e, url, status_msg.message_id)
                    return
            else:
                try:
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Instagram
                    if "instagram.com" in url.lower():
                        await bot.edit_message_text(
                            chat_id=target_chat_id,
                            message_id=status_msg.message_id,
                            text="üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ —Å Instagram..."
                        )
                        filepath = await asyncio.to_thread(download_instagram_video, url, tempdir, mode)
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
                        func = partial(ytdl_download, url, tempdir, mode, progress_hook, user_id)
                        filepath = await asyncio.wait_for(loop.run_in_executor(None, func), timeout=420)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    cache_manager.add_to_cache(url, filepath, mode)
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    history_manager.add_to_history(user_id, url, mode)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                    await self._send_file(callback_query, url, filepath, mode, status_msg.message_id)
                except Exception as e:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –≤–∏–¥–µ–æ –Ω–∞ Instagram, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if "instagram.com" in url.lower() and "private" in str(e).lower():
                        await self._handle_download_error(callback_query, DownloadError("–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ Stories. –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω —Ñ–∞–π–ª cookies."), url, status_msg.message_id)
                    else:
                        await self._handle_download_error(callback_query, e, url, status_msg.message_id)
                finally:
                    try:
                        if tempdir and os.path.isdir(tempdir):
                            shutil.rmtree(tempdir)
                    except Exception:
                        pass
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏")
            try:
                await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            except:
                pass
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            async with self.lock:
                if user_id in self.active_tasks:
                    if task_id in self.active_tasks[user_id]:
                        self.active_tasks[user_id].remove(task_id)
                    if not self.active_tasks[user_id]:
                        del self.active_tasks[user_id]
                self.processing -= 1
                # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
                if task_id in ACTIVE_DOWNLOADS:
                    del ACTIVE_DOWNLOADS[task_id]

    async def _download_direct_file(self, url: str, tempdir: str) -> str:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª"""
        filename = os.path.basename(urlparse(url).path) or "downloaded_file"
        if not any(filename.endswith(ext) for ext in [".mp4", ".mp3", ".mkv", ".webm", ".avi", ".mov", ".wmv", ".flv", ".m4a", ".wav", ".aac", ".ogg"]):
            filename += ".mp4"  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        filepath = os.path.join(tempdir, filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        with requests.get(url, stream=True, timeout=300) as r:
            r.raise_for_status()
            with open(filepath, 'wb') as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
        
        return filepath

    async def add_download(self, callback_query: types.CallbackQuery, url: str, mode: str):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—á–µ—Ä–µ–¥—å"""
        await self.queue.put((callback_query, url, mode))
        return True

    async def _send_cached_file(self, callback_query: types.CallbackQuery, file_path: str, mode: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ –∫—ç—à–∞"""
        try:
            target_chat_id = callback_query.message.chat.id
            await callback_query.message.answer("–ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é...")
            if mode == "audio":
                await bot.send_chat_action(target_chat_id, action=ChatAction.UPLOAD_DOCUMENT)
                audio = FSInputFile(file_path)
                await bot.send_audio(
                    target_chat_id,
                    audio,
                    caption=f"{os.path.basename(file_path)}"
                )
            else:
                await bot.send_chat_action(target_chat_id, action=ChatAction.UPLOAD_VIDEO)
                video = FSInputFile(file_path)
                await bot.send_video(
                    target_chat_id,
                    video,
                    caption=f"{os.path.basename(file_path)}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            # –ï—Å–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫—ç—à–∞
            cache_manager.remove_from_cache(file_path)
            # –ò –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
            await self.add_download(callback_query, callback_query.message.text, mode)

    async def _send_file(self, callback_query: types.CallbackQuery, url: str, filepath: str, mode: str, status_msg_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Å—Å—ã–ª–∫–∏"""
        try:
            target_chat_id = callback_query.message.chat.id
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏
            retry_id = str(uuid.uuid4())[:8]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID -> URL
            RETRY_LINKS[retry_id] = (url, time.time())
            # –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É" —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ URL
            retry_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data=f"retry:{mode}:{retry_id}")]
            ])
            await bot.edit_message_text(
                chat_id=target_chat_id,
                message_id=status_msg_id,
                text="–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª..."
            )
            stat = os.stat(filepath)
            size_mb = stat.st_size / (1024 * 1024)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ
            source = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            url_low = url.lower()
            if "youtube.com" in url_low or "youtu.be" in url_low:
                source = "YouTube"
            elif "tiktok.com" in url_low:
                source = "TikTok"
            elif "instagram.com" in url_low:
                source = "Instagram"
            elif "facebook.com" in url_low:
                source = "Facebook"
            elif "twitter.com" in url_low or "x.com" in url_low:
                source = "Twitter/X"
            elif "vk.com" in url_low or "m.vkvideo.ru" in url_low:
                source = "VK"
            elif "reddit.com" in url_low:
                source = "Reddit"
            elif "pinterest.com" in url_low or "pin.it" in url_low:
                source = "Pinterest"
            elif "dailymotion.com" in url_low:
                source = "Dailymotion"
            elif "vimeo.com" in url_low:
                source = "Vimeo"
            elif "soundcloud.com" in url_low:
                source = "SoundCloud"
            elif DIRECT_FILE_RE.search(url):
                source = "–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞"

            if size_mb > 48:
                await bot.edit_message_text(
                    chat_id=target_chat_id,
                    message_id=status_msg_id,
                    text=f"–§–∞–π–ª –±–æ–ª—å—à–æ–π ({size_mb:.1f} MB). –ü–æ–ø—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ transfer.sh..."
                )
                link = await asyncio.to_thread(upload_to_transfersh, filepath)
                if link:
                    await bot.edit_message_text(
                        chat_id=target_chat_id,
                        message_id=status_msg_id,
                        text=f"–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram ({size_mb:.1f} MB).\n–°—Å—ã–ª–∫–∞: {link}\nüìå –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\nüîó –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}",
                        reply_markup=retry_kb,
                        disable_web_page_preview=True
                    )
                else:
                    await bot.edit_message_text(
                        chat_id=target_chat_id,
                        message_id=status_msg_id,
                        text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ transfer.sh. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ.\nüìå –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\nüîó –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}",
                        reply_markup=retry_kb,
                        disable_web_page_preview=True
                    )
            else:
                caption = f"üìå –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\nüîó {url}"
                if mode == "audio":
                    await bot.send_chat_action(target_chat_id, action=ChatAction.UPLOAD_DOCUMENT)
                    audio = FSInputFile(filepath)
                    await bot.send_audio(
                        target_chat_id,
                        audio,
                        caption=caption
                    )
                else:
                    await bot.send_chat_action(target_chat_id, action=ChatAction.UPLOAD_VIDEO)
                    video = FSInputFile(filepath)
                    await bot.send_video(
                        target_chat_id,
                        video,
                        caption=caption
                    )
                await bot.edit_message_text(
                    chat_id=target_chat_id,
                    message_id=status_msg_id,
                    text=f"‚úÖ –ì–æ—Ç–æ–≤–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({size_mb:.1f} MB).\nüìå –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\nüîó –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}",
                    reply_markup=retry_kb,
                    disable_web_page_preview=True
                )
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
            await bot.edit_message_text(
                chat_id=target_chat_id,
                message_id=status_msg_id,
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}"
            )

    async def _handle_download_error(self, callback_query: types.CallbackQuery, error: Exception, url: str, status_msg_id: int):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏"""
        target_chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        error_type = error_manager.get_error_type(error, url)
        logger.warning(f"–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ {error_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(error)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lang = user_settings.get_settings(user_id)["language"]
        error_message = error_manager.format_error_message(error_type, lang)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        action_kb = None
        if error_type in [DownloadErrorType.NETWORK_ERROR, DownloadErrorType.RATE_LIMITED, DownloadErrorType.URL_NOT_FOUND]:
            action_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data=f"retry:auto:{url}")]
            ])
        elif error_type in [DownloadErrorType.PRIVATE_VIDEO, DownloadErrorType.AGE_RESTRICTED, DownloadErrorType.INVALID_COOKIES]:
            action_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üç™ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å cookies", callback_data="setup:cookies")]
            ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.edit_message_text(
                chat_id=target_chat_id,
                message_id=status_msg_id,
                text=error_message,
                reply_markup=action_kb,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
            try:
                await bot.edit_message_text(
                    chat_id=target_chat_id,
                    message_id=status_msg_id,
                    text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(error)[:1000]}",
                    reply_markup=action_kb
                )
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")

# ===== –ú–ï–ù–ï–î–ñ–ï–† –ö–≠–®–ê =====
class CacheManager:
    def __init__(self, cache_dir="downloads", db_path="cache.db"):
        self.cache_dir = cache_dir
        self.db_path = db_path
        os.makedirs(cache_dir, exist_ok=True)
        self._init_db()
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏
        asyncio.create_task(self._auto_cleanup_task())

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—ç—à–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS cache (
            url TEXT PRIMARY KEY,
            file_path TEXT NOT NULL,
            file_type TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        conn.commit()
        conn.close()

    def get_cached_file(self, url: str, file_type: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT file_path FROM cache WHERE url = ? AND file_type = ?", (url, file_type))
        result = cursor.fetchone()
        conn.close()
        if result and os.path.exists(result[0]):
            return result[0]
        return None

    def add_to_cache(self, url: str, file_path: str, file_type: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ –∫—ç—à"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫—ç—à
            if not os.path.exists(file_path):
                return False
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞
            filename = os.path.basename(file_path)
            cache_path = os.path.join(self.cache_dir, filename)
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ –∫—ç—à–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            if os.path.abspath(file_path) == os.path.abspath(cache_path):
                pass
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
                if os.path.exists(cache_path):
                    os.remove(cache_path)
                shutil.copy2(file_path, cache_path)
            cursor.execute(
                "INSERT OR REPLACE INTO cache (url, file_path, file_type) VALUES (?, ?, ?)",
                (url, cache_path, file_type)
            )
            conn.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
            return False
        finally:
            conn.close()

    def remove_from_cache(self, file_path: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –∫—ç—à–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute("DELETE FROM cache WHERE file_path = ?", (file_path,))
            conn.commit()
            # –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(file_path):
                os.remove(file_path)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}")
            return False
        finally:
            conn.close()

    def cleanup_old_files_by_hours(self, hours=6) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ (–±—ã–ª–æ –¥–Ω–µ–π)"""
        cutoff = datetime.now() - timedelta(hours=hours)
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM cache WHERE timestamp < ?", (cutoff,))
        deleted = cursor.rowcount
        conn.commit()
        conn.close()
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        if deleted > 0:
            self._cleanup_orphaned_files()
        return deleted

    def _cleanup_orphaned_files(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –¥–∏—Å–∫–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT file_path FROM cache")
        cached_files = set(row[0] for row in cursor.fetchall())
        conn.close()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –∫—ç—à–∞
        for filename in os.listdir(self.cache_dir):
            file_path = os.path.join(self.cache_dir, filename)
            if os.path.isfile(file_path) and file_path not in cached_files:
                try:
                    os.remove(file_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –æ—Ä—Ñ–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞: {file_path}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä—Ñ–∞–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")

    def get_cache_size(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –≤ –±–∞–π—Ç–∞—Ö"""
        total_size = 0
        for filename in os.listdir(self.cache_dir):
            file_path = os.path.join(self.cache_dir, filename)
            if os.path.isfile(file_path):
                total_size += os.path.getsize(file_path)
        return total_size

    def cleanup_by_size(self, target_size: int) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —É–¥–∞–ª—è—è —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT url, file_path, timestamp FROM cache ORDER BY timestamp ASC")
        files = cursor.fetchall()
        conn.close()
        current_size = self.get_cache_size()
        if current_size <= target_size:
            return 0
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö
        deleted_count = 0
        for url, file_path, timestamp in files:
            if current_size <= target_size:
                break
            try:
                size = os.path.getsize(file_path)
                os.remove(file_path)
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM cache WHERE url = ?", (url,))
                conn.commit()
                conn.close()
                current_size -= size
                deleted_count += 1
                logger.info(f"–û—á–∏—â–µ–Ω –∫—ç—à: {file_path} ({size/(1024*1024):.2f} MB)")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∫—ç—à–∞ {file_path}: {e}")
        return deleted_count

    async def _auto_cleanup_task(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
        while True:
            try:
                # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤ (–±—ã–ª–æ 7 –¥–Ω–µ–π)
                deleted = self.cleanup_old_files_by_hours(hours=6)
                if deleted > 0:
                    logger.info(f"–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: —É–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                cache_size = self.get_cache_size()
                max_cache_size = 10 * 1024 * 1024 * 1024  # 10 GB
                if cache_size > max_cache_size:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º 8 GB
                    target_size = 8 * 1024 * 1024 * 1024
                    deleted_count = self.cleanup_by_size(target_size)
                    logger.info(f"–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            await asyncio.sleep(24 * 3600)

# ===== –ú–ï–ù–ï–î–ñ–ï–† –ò–°–¢–û–†–ò–ò –ó–ê–ì–†–£–ó–û–ö =====
class HistoryManager:
    def __init__(self, db_path="history.db"):
        self.db_path = db_path
        self._init_db()

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS history (
            user_id INTEGER NOT NULL,
            url TEXT NOT NULL,
            file_type TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (user_id, url, file_type)
        )
        """)
        conn.commit()
        conn.close()

    def add_to_history(self, user_id: int, url: str, file_type: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute(
                "INSERT OR REPLACE INTO history (user_id, url, file_type) VALUES (?, ?, ?)",
                (user_id, url, file_type)
            )
            conn.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
            return False
        finally:
            conn.close()

    def get_history(self, user_id: int, limit=10) -> List[Tuple[str, str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute(
                "SELECT url, file_type, timestamp FROM history WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?",
                (user_id, limit)
            )
            return cursor.fetchall()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
        finally:
            conn.close()

    def clear_history(self, user_id: int) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute(
                "DELETE FROM history WHERE user_id = ?",
                (user_id,)
            )
            conn.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return False
        finally:
            conn.close()

# ===== –ü–û–î–î–ï–†–ñ–ö–ê COOKIES =====
COOKIES_DIR = "cookies"
os.makedirs(COOKIES_DIR, exist_ok=True)
USER_COOKIES = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ cookies —Ñ–∞–π–ª–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"
RETRY_LINKS = {}
RETRY_LINKS_EXPIRY = 3600  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)

async def cleanup_retry_links():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ RETRY_LINKS"""
    while True:
        try:
            now = time.time()
            # –ö–æ–ø–∏—Ä—É–µ–º –∫–ª—é—á–∏, —Ç–∞–∫ –∫–∞–∫ –º—ã –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–∞—Ä—å
            for retry_id, (url, timestamp) in list(RETRY_LINKS.items()):
                if now - timestamp > RETRY_LINKS_EXPIRY:
                    del RETRY_LINKS[retry_id]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ RETRY_LINKS: {e}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        await asyncio.sleep(600)

def get_cookies_path(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ cookies —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return os.path.join(COOKIES_DIR, f"{user_id}.txt")

def setup_user_cookies(user_id: int, cookies_file: str) -> str:
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å cookies –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dest_path = get_cookies_path(user_id)
    shutil.copy2(cookies_file, dest_path)
    USER_COOKIES[user_id] = dest_path
    return dest_path

def get_ytdl_options(user_id: Optional[int] = None):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp —Å —É—á–µ—Ç–æ–º cookies –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    opts = YTDL_BASE_OPTS.copy()
    # –î–æ–±–∞–≤–ª—è–µ–º cookies, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id and user_id in USER_COOKIES:
        opts["cookiefile"] = USER_COOKIES[user_id]
    return opts

# ---- helper functions ----
def find_first_url(text: str) -> Optional[str]:
    if not text:
        return None
    m = URL_RE.search(text)
    return m.group(0) if m else None

def strip_tracking_params(url: str) -> str:
    try:
        p = urlparse(url)
        return urlunparse((p.scheme, p.netloc, p.path, "", "", ""))
    except Exception:
        return url

def resolve_redirects(url: str, timeout: int = 10) -> str:
    """–°–ª–µ–¥—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º ‚Äî —Å–Ω–∞—á–∞–ª–∞ HEAD, –∑–∞—Ç–µ–º GET (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)."""
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        r = requests.head(url, allow_redirects=True, timeout=timeout, headers=headers)
        if r.url:
            return r.url
    except Exception:
        pass
    try:
        r = requests.get(url, allow_redirects=True, timeout=timeout, headers={"User-Agent": "Mozilla/5.0"})
        return r.url
    except Exception:
        return url

def extract_jsonld(html: str) -> Optional[dict]:
    try:
        for m in re.finditer(
            r'<script[^>]*type=["\']application/ld\+json["\'][^>]*>(.*?)</script>',
            html, re.DOTALL | re.IGNORECASE
        ):
            text = m.group(1).strip()
            try:
                return json.loads(text)
            except Exception:
                try:
                    return json.loads(text.replace('\n', ''))
                except Exception:
                    continue
    except Exception:
        pass
    return None

def extract_sigi_state(html: str) -> Optional[dict]:
    try:
        m = re.search(r'<script[^>]*id=["\']SIGI_STATE["\'][^>]*>(.*?)</script>', html, re.DOTALL | re.IGNORECASE)
        if not m:
            return None
        text = m.group(1).strip()
        text = re.sub(r'^\s*(?:window\.)?SIGI_STATE\s*=\s*', '', text)
        text = text.rstrip(';\n ')
        try:
            return json.loads(text)
        except Exception:
            mm = re.search(r'"ItemModule"\s*:\s*({.*?})\s*,', text, re.DOTALL)
            if mm:
                try:
                    return {"ItemModule": json.loads(mm.group(1))}
                except Exception:
                    return None
    except Exception:
        pass
    return None

def extract_tiktok_video_from_html(html: str) -> Optional[str]:
    # 1) JSON-LD
    try:
        ld = extract_jsonld(html)
        def pick_from_ld(obj) -> Optional[str]:
            if not isinstance(obj, dict):
                return None
            cu = obj.get("contentUrl")
            if cu:
                return strip_tracking_params(cu)
            u = obj.get("url")
            if u and "/video/" in u:
                return strip_tracking_params(u)
            return None
        if isinstance(ld, dict):
            got = pick_from_ld(ld)
            if got:
                return got
        elif isinstance(ld, list):
            for el in ld:
                got = pick_from_ld(el) if isinstance(el, dict) else None
                if got:
                    return got
    except Exception:
        pass
    # 2) SIGI_STATE
    try:
        sigi = extract_sigi_state(html)
        if sigi:
            item_module = sigi.get("ItemModule") or {}
            if isinstance(item_module, dict):
                for k, v in item_module.items():
                    vid = None
                    user = None
                    if isinstance(v, dict):
                        vid = v.get("id") or v.get("itemInfos", {}).get("id") or k
                        user = (
                            v.get("author") or
                            v.get("authorInfo") or
                            v.get("itemInfos", {}).get("author")
                        )
                    if vid:
                        if isinstance(user, dict):
                            user = user.get("uniqueId") or user.get("nickname")
                        if user:
                            return f"https://www.tiktok.com/@{user}/video/{vid}"
                        return f"https://www.tiktok.com/video/{vid}"
    except Exception:
        pass
    # 3) og:url
    m = re.search(r'<meta[^>]+property=["\']og:url["\'][^>]+content=["\']([^"\']+)["\']', html, re.IGNORECASE)
    if m:
        u = m.group(1)
        if "/video/" in u:
            return strip_tracking_params(u)
    # 4) itemId
    m = re.search(r'itemId["\']?\s*[:=]\s*["\']?(\d{6,})["\']?', html)
    if m:
        vid = m.group(1)
        u = re.search(r'"uniqueId"\s*:\s*"([^"]+)"', html)
        if u:
            return f"https://www.tiktok.com/@{u.group(1)}/video/{vid}"
        return f"https://www.tiktok.com/video/{vid}"
    # 5) fallback –ø–æ /@user/video/<id>
    m = re.search(r'/@([^/]+)/video/(\d{6,})', html)
    if m:
        user, vid = m.group(1), m.group(2)
        return f"https://www.tiktok.com/@{user}/video/{vid}"
    return None

def normalize_tiktok_url_blocking(url: str) -> Optional[str]:
    """
    –ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏. –í—ã–∑—ã–≤–∞–µ–º –µ—ë —á–µ—Ä–µ–∑ asyncio.to_thread(...)
    —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop.
    """
    try:
        url_low = url.lower()
        # –ï—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è/—Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ vm.tiktok.com ‚Äî —Ä–∞—Å–ø—É—Ç–∞–µ–º
        if any(d in url_low for d in SHORTENER_DOMAINS):
            final = resolve_redirects(url)
            final_clean = strip_tracking_params(final)
            if "/video/" in final_clean or "vm.tiktok.com" in final_clean:
                return final_clean
            try:
                r = requests.get(final, headers={"User-Agent": "Mozilla/5.0"}, timeout=12)
                if r.status_code == 200:
                    ex = extract_tiktok_video_from_html(r.text)
                    if ex:
                        return ex
            except Exception:
                pass
        # –£–∂–µ –Ω–∞ /video/
        if "/video/" in url_low:
            return strip_tracking_params(url)
        # –ü—Ä–æ—Ñ–∏–ª—å/—Ö—ç—à—Ç–µ–≥/–º—É–∑—ã–∫–∞/–ø–æ–∏—Å–∫ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –≤–∏–¥–µ–æ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if any(p in url_low for p in ("/@", "/tag/", "/hashtag/", "/music/", "/explore", "/search")):
            try:
                r = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=12)
                if r.status_code == 200:
                    ex = extract_tiktok_video_from_html(r.text)
                    if ex:
                        return ex
            except Exception:
                pass
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
        final = resolve_redirects(url)
        final_clean = strip_tracking_params(final)
        if "/video/" in final_clean:
            return final_clean
    except Exception:
        logger.exception("normalize_tiktok_url error for %s", url)
    return None

def normalize_twitter_url(url: str) -> Optional[str]:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL Twitter/X"""
    try:
        url_low = url.lower()
        if "x.com" in url_low or "twitter.com" in url_low:
            # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
            final = resolve_redirects(url)
            # –£–±–∏—Ä–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            clean = strip_tracking_params(final)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å
            if re.search(r'(?:twitter\.com|x\.com)/[^/]+/status/\d+', clean, re.IGNORECASE):
                return clean
    except Exception:
        logger.exception("normalize_twitter_url error for %s", url)
    return None

def normalize_reddit_url(url: str) -> Optional[str]:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL Reddit ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ"""
    try:
        url_low = url.lower()
        if "reddit.com" in url_low:
            # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
            final = resolve_redirects(url)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç
            if not re.search(r'reddit\.com/(?:r/[^/]+/comments/|comments/)[\w]+/[\w_-]+/[\w]+', final, re.IGNORECASE):
                return None
            # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
            r = requests.get(final, headers=headers, timeout=12)
            if r.status_code != 200:
                return None
            html = r.text
            # –ò—â–µ–º JSON –≤ HTML (Reddit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞)
            # –ò—â–µ–º window.___r = –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ
            match = re.search(r'window\.___r\s*=\s*({.*?});', html, re.DOTALL)
            if not match:
                return None
            try:
                data = json.loads(match.group(1))
                # –ò—â–µ–º –≤–∏–¥–µ–æ –≤ –¥–∞–Ω–Ω—ã—Ö
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è, –Ω–æ –æ–±—ã—á–Ω–æ –≤–∏–¥–µ–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤:
                # data.props.pageProps.postInfo.post
                post = data.get("props", {}).get("pageProps", {}).get("postInfo", {}).get("post", {})
                if not post:
                    return None
                # –ò—â–µ–º –≤–∏–¥–µ–æ
                video_url = None
                media = post.get("media", {})
                if media.get("type") == "video":
                    video_url = media.get("content", {}).get("url")
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: —á–µ—Ä–µ–∑ secure_media
                if not video_url:
                    secure_media = post.get("secure_media", {})
                    if secure_media.get("type") == "video":
                        video_url = secure_media.get("content", {}).get("url")
                # –ï—â–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–±: —á–µ—Ä–µ–∑ crosspost_parent_list
                if not video_url:
                    crosspost = post.get("crosspost_parent_list", [])
                    if crosspost and len(crosspost) > 0:
                        media = crosspost[0].get("media", {})
                        if media.get("type") == "video":
                            video_url = media.get("content", {}).get("url")
                if video_url:
                    return video_url
            except Exception:
                logger.exception("Failed to parse Reddit JSON")
                return None
    except Exception:
        logger.exception("normalize_reddit_url error for %s", url)
    return None

def download_instagram_video(url: str, out_dir: str, mode: str = "video") -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Å Instagram –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è yt-dlp.
    –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –±–µ–∑ cookies.
    """
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Accept-Language": "en-US,en;q=0.9",
        "Accept-Encoding": "gzip, deflate",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Referer": "https://www.instagram.com/",
    }

    # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    session = requests.Session()
    r = session.get(url, headers=headers, timeout=30)
    if r.status_code != 200:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É Instagram: {r.status_code}")

    # –ò—â–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞
    match = re.search(r'<script type="application/ld\+json" nonce="[^"]*">(.+?)</script>', r.text, re.DOTALL)
    if not match:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: –∏—â–µ–º window.__additionalDataLoaded
        match = re.search(r'window\.__additionalDataLoaded\([^,]+,\s*({.+?})\);', r.text, re.DOTALL)
        if not match:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Instagram")

    try:
        if "application/ld+json" in r.text:
            data = json.loads(match.group(1))
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∏–¥–µ–æ
            if isinstance(data, list):
                for item in data:
                    if item.get("@type") == "VideoObject":
                        video_url = item.get("contentUrl")
                        if video_url:
                            break
            else:
                video_url = data.get("contentUrl")
        else:
            data = json.loads(match.group(1))
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            post_data = data.get("graphql", {}).get("shortcode_media", {}) if "graphql" in data else data.get("items", [{}])[0]
            # –ò—â–µ–º –≤–∏–¥–µ–æ
            video_url = None
            if post_data.get("__typename") == "GraphVideo" or post_data.get("is_video"):
                video_url = post_data.get("video_url") or post_data.get("hd_url") or post_data.get("video_versions", [{}])[0].get("url")
            # –î–ª—è –∫–∞—Ä—É—Å–µ–ª–µ–π (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ)
            elif post_data.get("__typename") == "GraphSidecar":
                edges = post_data.get("edge_sidecar_to_children", {}).get("edges", [])
                if edges:
                    for edge in edges:
                        node = edge.get("node", {})
                        if node.get("__typename") == "GraphVideo":
                            video_url = node.get("video_url")
                            break
    except Exception as e:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Instagram: {str(e)}")

    if not video_url:
        raise Exception("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç–µ Instagram")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    filename = f"instagram_{int(time.time())}"
    if mode == "audio":
        filename += ".mp3"
    else:
        filename += ".mp4"

    filepath = os.path.join(out_dir, filename)

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    with requests.get(video_url, headers=headers, stream=True, timeout=300) as r:
        r.raise_for_status()
        with open(filepath, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)

    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    if mode == "audio":
        try:
            import subprocess
            audio_filepath = filepath.replace(".mp4", ".mp3")
            subprocess.run([
                "ffmpeg", "-i", filepath, "-vn", "-acodec", "libmp3lame", "-q:a", "2", audio_filepath
            ], check=True, capture_output=True)
            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª
            os.remove(filepath)
            filepath = audio_filepath
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ: {e}. –û—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ.")

    return filepath

def is_youtube_video(url: str) -> bool:
    return bool(YOUTUBE_VIDEO_RE.search(url or ""))

def is_supported_by_platform(url: str) -> bool:
    u = (url or "").lower()
    if "tiktok.com" in u or "vm.tiktok.com" in u or "m.tiktok.com" in u:
        return bool(TIKTOK_ANY_RE.search(u))
    if "youtube.com" in u or "youtu.be" in u:
        return is_youtube_video(url)
    if "instagram.com" in u:
        return bool(INSTAGRAM_RE.search(u))
    if "facebook.com" in u:
        return bool(FACEBOOK_RE.search(u))
    if "twitter.com" in u or "x.com" in u:
        return bool(TWITTER_RE.search(u))
    if "vk.com" in u or "m.vkvideo.ru" in u:
        return bool(VK_RE.search(u))
    if "reddit.com" in u:
        return bool(REDDIT_RE.search(u))
    if "pinterest.com" in u or "pin.it" in u:
        return bool(PINTEREST_RE.search(u))
    if "dailymotion.com" in u:
        return bool(DAILYMOTION_RE.search(u))
    if "vimeo.com" in u:
        return bool(VIMEO_RE.search(u))
    if "soundcloud.com" in u:
        return bool(SOUNDCLOUD_RE.search(u))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã
    if DIRECT_FILE_RE.search(url):
        return True
    return False

def make_actions_kb(pending_msg_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ê—É–¥–∏–æ (mp3)", callback_data=f"dl:audio:{pending_msg_id}"),
            InlineKeyboardButton(text="–í–∏–¥–µ–æ (mp4)", callback_data=f"dl:video:{pending_msg_id}")
        ],
        [
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"dl:cancel:{pending_msg_id}")
        ]
    ])

def upload_to_transfersh(path: str) -> Optional[str]:
    filename = os.path.basename(path)
    url = f"https://transfer.sh/{filename}"
    try:
        with open(path, "rb") as fp:
            r = requests.put(url, data=fp, timeout=120)
            if r.status_code in (200, 201):
                return r.text.strip()
    except Exception:
        logger.exception("transfer.sh upload failed")
    return None

# ---- yt-dlp download ----
def ytdl_download(url: str, out_dir: str, mode: str, progress_hook=None, user_id: Optional[int] = None) -> str:
    """
    –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ yt-dlp. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ö—É–∫ –∏ cookies.
    """
    opts = get_ytdl_options(user_id)
    opts["outtmpl"] = os.path.join(out_dir, "%(id)s.%(ext)s")
    if mode == "audio":
        opts.update({
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
        })
    else:
        opts.update({
            "format": "bestvideo+bestaudio/best",
            "merge_output_format": "mp4",
        })
    if progress_hook:
        opts["progress_hooks"] = [progress_hook]
    with YoutubeDL(opts) as ytdl:
        info = ytdl.extract_info(url, download=True)
        if mode == "audio":
            filename = os.path.join(out_dir, f"{info.get('id')}.mp3")
            if not os.path.exists(filename):
                filename = ytdl.prepare_filename(info)
                filename = os.path.splitext(filename)[0] + ".mp3"
        else:
            filename = ytdl.prepare_filename(info)
            if not filename.lower().endswith(".mp4"):
                filename = os.path.splitext(filename)[0] + ".mp4"
        if not os.path.exists(filename):
            raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {filename}")
        return filename

def make_progress_hook(loop: asyncio.AbstractEventLoop, chat_id: int, status_message_id: int, task_id: int):
    """
    –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ö—É–∫ –¥–ª—è yt-dlp —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    """
    last_update = 0.0
    total_size = 0
    start_time = time.time()

    async def _edit(text: str, reply_markup=None):
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.debug(f"Failed to edit progress message: {e}")
            pass

    def hook(d: dict):
        nonlocal last_update, total_size
        try:
            status = d.get("status")
            now = time.time()
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            control_kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"progress:pause:{task_id}"),
                    InlineKeyboardButton(text="‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"progress:cancel:{task_id}")
                ]
            ])
            if status == "downloading":
                total = d.get("total_bytes") or d.get("total_bytes_estimate") or 0
                downloaded = d.get("downloaded_bytes", 0)
                speed = d.get("speed", 0)
                if total > 0:
                    total_size = total
                    percent = min(100, max(0, downloaded / total * 100))
                    # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    filled = int(percent / 5)
                    empty = 20 - filled
                    progress_bar = "‚ñ∞" * filled + "‚ñ±" * empty
                    # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                    elapsed = now - start_time
                    if speed > 0:
                        remaining = (total - downloaded) / speed
                        mins, secs = divmod(int(remaining), 60)
                        time_str = f"–û—Å—Ç–∞–ª–æ—Å—å: {mins}–º {secs}—Å"
                    else:
                        time_str = "–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                    # –°–∫–æ—Ä–æ—Å—Ç—å —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º
                    if elapsed > 0:
                        avg_speed = downloaded / elapsed
                        speed_str = f"–¢–µ–∫—É—â–∞—è: {speed/1024:.1f} KB/s | –°—Ä–µ–¥–Ω—è—è: {avg_speed/1024:.1f} KB/s"
                    else:
                        speed_str = f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed/1024:.1f} KB/s"
                    text = (
                        f"‚è≥ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ</b>\n"
                        f"{progress_bar} <code>{percent:.1f}%</code>\n"
                        f"–°–∫–∞—á–∞–Ω–æ: <code>{downloaded//1024} KB</code> –∏–∑ <code>{total//1024} KB</code>\n"
                        f"{speed_str}\n"
                        f"{time_str}"
                    )
                else:
                    text = f"üì• –°–∫–∞—á–∞–Ω–æ: {downloaded//1024} KB"
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if now - last_update > 2.0 or (percent % 5 == 0 and percent > 0):
                    last_update = now
                    asyncio.run_coroutine_threadsafe(_edit(text, control_kb), loop)
            elif status == "processing":
                text = (
                    "üé¨ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ</b>\n"
                    "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤...\n"
                    "–≠—Ç–æ—Ç —ç—Ç–∞–ø –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ."
                )
                asyncio.run_coroutine_threadsafe(_edit(text, control_kb), loop)
            elif status == "finished":
                text = "‚úÖ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ..."
                asyncio.run_coroutine_threadsafe(_edit(text), loop)
        except Exception as e:
            logger.debug(f"Progress hook error: {str(e)}", exc_info=True)
    return hook

# ---- handlers ----
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="start_download")
        ],
        [
            InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫", callback_data="history:view")
        ]
    ])
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –¥–ª—è —Ç–µ–±—è –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Å YouTube, TikTok, Instagram, Facebook, Twitter/X, VK, Reddit, Pinterest, Dailymotion, Vimeo, SoundCloud –∏ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫.\n"
        "üë§ –ê–≤—Ç–æ—Ä: @frastiel",
        reply_markup=keyboard
    )

async def cmd_cookies(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cookies –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ cookies"""
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª cookies.txt.\n"
        "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ, –≤–∏–¥–µ–æ —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ "
        "–∏–ª–∏ –≤–∏–¥–µ–æ, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Netscape HTTP Cookie File."
    )

def is_valid_netscape_cookie_file(file_path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º Netscape HTTP Cookie File"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        cookie_lines = [line.strip() for line in lines if line.strip() and not line.startswith('#')]
        
        if not cookie_lines:
            return False
        
        for line in cookie_lines:
            parts = line.split('\t')
            if len(parts) < 7:
                return False
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ 5-–π —ç–ª–µ–º–µ–Ω—Ç (expiration timestamp) ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ
            try:
                int(parts[4])
            except ValueError:
                return False
                
        return True
    except Exception:
        return False

async def handle_cookies_file(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ cookies"""
    if message.document is None or message.document.file_name != "cookies.txt":
        if message.document:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º cookies.txt")
        return
    file = await bot.get_file(message.document.file_id)
    file_path = file.file_path
    cookies_dir = "cookies"
    os.makedirs(cookies_dir, exist_ok=True)
    user_cookies_path = os.path.join(cookies_dir, f"{message.from_user.id}.txt")
    await bot.download_file(file_path, user_cookies_path)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ cookies
    if os.path.getsize(user_cookies_path) < 10:
        os.remove(user_cookies_path)
        await message.reply("–§–∞–π–ª cookies.txt —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        return
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not is_valid_netscape_cookie_file(user_cookies_path):
        os.remove(user_cookies_path)
        await message.reply("–§–∞–π–ª cookies.txt –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è 'Get cookies.txt'.")
        return
    USER_COOKIES[message.from_user.id] = user_cookies_path
    await message.reply("–§–∞–π–ª cookies —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ.")

def has_enough_disk_space(path: str, required_mb: int = 500) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
    try:
        total, used, free = shutil.disk_usage(path)
        free_mb = free // (1024 * 1024)
        return free_mb >= required_mb
    except Exception:
        return True  # –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É

async def handle_text(message: types.Message):
    text = (message.text or "").strip()
    url = find_first_url(text)
    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç - —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
    if not url:
        if message.chat.type == "private":
            await message.reply("–ù–µ –Ω–∞—à—ë–ª —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        return

    normalized = url
    ulow = url.lower()

    if any(dom in ulow for dom in ("tiktok.com", "vm.tiktok.com", "m.tiktok.com")):
        try:
            norm = await asyncio.to_thread(normalize_tiktok_url_blocking, url)
            if norm:
                normalized = norm
        except Exception:
            logger.exception("Normalization failed for %s", url)
    elif any(dom in ulow for dom in ("twitter.com", "x.com")):
        try:
            norm = normalize_twitter_url(url)
            if norm:
                normalized = norm
        except Exception:
            logger.exception("Normalization failed for %s", url)
    elif "reddit.com" in ulow:
        try:
            norm = normalize_reddit_url(url)
            if norm:
                normalized = norm
        except Exception:
            logger.exception("Normalization failed for %s", url)
    elif "pinterest.com" in ulow or "pin.it" in ulow:
        try:
            final = resolve_redirects(url)
            clean = strip_tracking_params(final)
            if "/pin/" in clean:
                normalized = clean
        except Exception:
            logger.exception("Normalization failed for %s", url)
    elif DIRECT_FILE_RE.search(url):
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await message.answer(
            "üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞."
        )

    if not is_supported_by_platform(normalized):
        # –í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        if message.chat.type == "private":
            await message.reply(
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.\n"
                "–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: YouTube, TikTok, Instagram, Facebook, Twitter/X, VK, Reddit, Pinterest, Dailymotion, Vimeo, SoundCloud.\n"
                "–¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã (mp4, mp3 –∏ –¥—Ä.).\n"
                "–ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å/—Ö–µ—à—Ç–µ–≥/—Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ."
            )
        return

    kb_msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=make_actions_kb(0))
    PENDING_LINKS[kb_msg.message_id] = normalized
    await bot.edit_message_reply_markup(
        chat_id=kb_msg.chat.id,
        message_id=kb_msg.message_id,
        reply_markup=make_actions_kb(kb_msg.message_id)
    )

# --- –∫–æ–ª–±—ç–∫ ---
async def cb_download(callback: types.CallbackQuery):
    data = callback.data or ""
    parts = data.split(":")
    if len(parts) != 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    _, what, msg_id_str = parts
    try:
        msg_id = int(msg_id_str)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    original_url = PENDING_LINKS.get(msg_id)
    if not original_url:
        await callback.answer("–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.", show_alert=True)
        return
    if what == "cancel":
        PENDING_LINKS.pop(msg_id, None)
        try:
            await callback.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        except Exception:
            pass
        await callback.answer()
        return
    await callback.answer()
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
    user_id = callback.from_user.id
    mode = "audio" if what == "audio" else "video"
    await download_manager.add_download(callback, original_url, mode)
    # –£–¥–∞–ª—è–µ–º –∏–∑ PENDING_LINKS, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
    PENDING_LINKS.pop(msg_id, None)

async def cmd_history(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    history = history_manager.get_history(user_id)
    if not history:
        await message.reply("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –ø—É—Å—Ç–∞.")
        return
    text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫:\n"
    for i, (url, file_type, timestamp) in enumerate(history, 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        try:
            dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S.%f") if '.' in timestamp else datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
            date_str = dt.strftime("%d.%m.%Y %H:%M")
        except:
            date_str = timestamp
        text += f"{i}. {date_str}\n"
        text += f"üîó {url}\n"
        text += f"üé¨ {'–í–∏–¥–µ–æ' if file_type == 'video' else '–ê—É–¥–∏–æ'}\n"
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    clear_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="history:clear")]
    ])
    await message.reply(text, reply_markup=clear_kb)

async def cb_history(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
    data = callback.data
    user_id = callback.from_user.id
    if data == "history:clear":
        if history_manager.clear_history(user_id):
            await callback.message.edit_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –æ—á–∏—â–µ–Ω–∞.")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")
    elif data == "history:view":
        history = history_manager.get_history(user_id)
        if not history:
            await callback.message.edit_text("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –ø—É—Å—Ç–∞.")
            return
        text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫:\n"
        for i, (url, file_type, timestamp) in enumerate(history, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S.%f") if '.' in timestamp else datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                date_str = dt.strftime("%d.%m.%Y %H:%M")
            except:
                date_str = timestamp
            text += f"{i}. {date_str}\n"
            text += f"üîó {url}\n"
            text += f"üé¨ {'–í–∏–¥–µ–æ' if file_type == 'video' else '–ê—É–¥–∏–æ'}\n"
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        clear_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="history:clear")]
        ])
        await callback.message.edit_text(text, reply_markup=clear_kb)
    elif data == "start_download":
        await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookies —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä
async def cb_setup_cookies(callback: types.CallbackQuery):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookies"""
    await callback.answer("–ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookies...")
    user_id = callback.from_user.id
    lang = user_settings.get_settings(user_id)["language"]
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookies
    setup_message = (
        "<b>üç™ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cookies</b>\n"
        "–≠—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å cookies –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –≤–∏–¥–µ–æ.\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ <a href='https://chrome.google.com/webstore/detail/get-cookiestxt/bgaddhkoddajcdgocldbbfleckgcbcid'>Get cookies.txt</a>\n"
        "2. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ\n"
        "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ 'Save as cookies.txt'\n"
        "4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—é–¥–∞"
    )
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    setup_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="TikTok", callback_data="setup:platform_tiktok"),
            InlineKeyboardButton(text="Instagram", callback_data="setup:platform_instagram")
        ],
        [
            InlineKeyboardButton(text="YouTube", callback_data="setup:platform_youtube"),
            InlineKeyboardButton(text="Facebook", callback_data="setup:platform_facebook")
        ],
        [
            InlineKeyboardButton(text="Twitter/X", callback_data="setup:platform_twitter"),
            InlineKeyboardButton(text="VK", callback_data="setup:platform_vk")
        ],
        [
            InlineKeyboardButton(text="Reddit", callback_data="setup:platform_reddit"),
            InlineKeyboardButton(text="Pinterest", callback_data="setup:platform_pinterest")
        ],
        [
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="setup:cancel")
        ]
    ])
    await callback.message.edit_text(
        setup_message,
        reply_markup=setup_kb,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

async def cb_retry(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'"""
    data = callback.data
    parts = data.split(":")
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    _, mode, retry_id = parts[0], parts[1], parts[2]
    # –ü–æ–ª—É—á–∞–µ–º URL –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID
    if retry_id not in RETRY_LINKS:
        await callback.answer("–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    url, _ = RETRY_LINKS[retry_id]
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É...")
    await download_manager.add_download(callback, url, mode)
    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π ID –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    if retry_id in RETRY_LINKS:
        del RETRY_LINKS[retry_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–æ–π (–ø–∞—É–∑–∞/–æ—Ç–º–µ–Ω–∞)
async def cb_progress_control(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–æ–π"""
    data = callback.data
    parts = data.split(":")
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    _, action, task_id_str = parts
    try:
        task_id = int(task_id_str)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞
    if task_id not in ACTIVE_DOWNLOADS:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
        return
    download_info = ACTIVE_DOWNLOADS[task_id]
    user_id = callback.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç —ç—Ç–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
    if download_info["user_id"] != user_id:
        await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–≥—Ä—É–∑–∫–∞.", show_alert=True)
        return
    if action == "pause":
        # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ yt-dlp –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É
        # –ù–æ –º—ã –º–æ–∂–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await callback.answer("–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ó–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É
        if "status_msg_id" in download_info:
            try:
                await bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=download_info["status_msg_id"],
                    text="–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
                )
            except Exception:
                pass
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # –ù–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π resumable downloads
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        if task_id in ACTIVE_DOWNLOADS:
            del ACTIVE_DOWNLOADS[task_id]
    elif action == "cancel":
        await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "status_msg_id" in download_info:
            try:
                await bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=download_info["status_msg_id"],
                    text="–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
                )
            except Exception:
                pass
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        if task_id in ACTIVE_DOWNLOADS:
            del ACTIVE_DOWNLOADS[task_id]

# ===== –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø HEALTH CHECK =====
async def health_check(request):
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return web.json_response({"status": "ok", "bot": "running"})

async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check"""
    app = web.Application()
    app.router.add_get('/health', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    site = web.TCPSite(runner, '0.0.0.0', 10000)
    await site.start()
    logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health check –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000")

# ---- lifecycle ----
async def on_startup():
    logger.info("Start polling")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ RETRY_LINKS
    asyncio.create_task(cleanup_retry_links())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
    asyncio.create_task(start_web_server())

async def on_shutdown():
    logger.info("Shutting down...")
    await bot.session.close()

async def main():
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    global download_manager, cache_manager, history_manager
    download_manager = DownloadManager(max_concurrent=3)
    cache_manager = CacheManager()
    history_manager = HistoryManager()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
    bot_info = await bot.get_me()
    bot_username = bot_info.username.lower()

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    group_filter = GroupFilter(bot_username)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(cmd_start, Command(commands=["start", "help"]), group_filter)
    dp.message.register(cmd_cookies, Command(commands=["cookies"]), group_filter)
    dp.message.register(cmd_history, Command(commands=["history"]), group_filter)
    dp.message.register(handle_cookies_file, F.document, group_filter)
    dp.message.register(handle_text, F.text, group_filter)

    # –ö–æ–ª–±—ç–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ–≥–¥–∞ (–ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ)
    dp.callback_query.register(cb_download, F.data.startswith("dl:"))
    dp.callback_query.register(cb_history, F.data.startswith("history:"))
    dp.callback_query.register(cb_retry, F.data.startswith("retry:"))
    dp.callback_query.register(cb_progress_control, F.data.startswith("progress:"))
    dp.callback_query.register(cb_setup_cookies, F.data == "setup:cookies")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    try:
        await dp.start_polling(bot, on_startup=on_startup, on_shutdown=on_shutdown)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())

